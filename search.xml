<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Js笔记]]></title>
    <url>%2F2018%2F10%2F07%2FJs%2F</url>
    <content type="text"><![CDATA[js笔记 thisthis代表当前对象，但是在事件中代表的是当前对象 排他性 使用id或者index 123456789window.onload = function () &#123; var button = document.getElementsByClassName("button"); for(var i = 0; i&lt;button.length;i++)&#123; //异步 button[i].id = i; button[i].onclick = function () &#123; alert("你点了"+this.id+"按钮"); &#125; &#125; &#125; 使用闭包 12345678910window.onload = function () &#123; var button = document.getElementsByClassName("button"); for(var i = 0; i&lt;button.length;i++)&#123; //异步 (function (i) &#123; button[i].onclick = function () &#123; alert("你点了"+i+"按钮"); &#125; &#125;)(i); &#125; &#125; 数组高级API 1234567891011121314151617181920//1.判断数组类型var arr = [1,2,4];console.log(typeof arr); //objectconsole.log(arr instanceof Array); //truevar arr2 = new Array();console.log(Array.isArray(arr2)); //Array判断是否是数组//2.toString 转化成string，每个用，分割var arr3 = [1,3,"我是","hello"];console.log(arr3.toString()); //3. valueOf() 返回数组对象本身var arr4 = arr.valueOf();console.log(arr4);//4.join() 方法用于把数组中的所有元素放入一个字符串var arr5 = arr3.join("-");console.log(arr5);//5.indexOf()和lastIndexOf() 字符串string]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试插入图片]]></title>
    <url>%2F2018%2F10%2F07%2FTest%2F</url>
    <content type="text"><![CDATA[引入图片]]></content>
  </entry>
  <entry>
    <title><![CDATA[Markdown用法]]></title>
    <url>%2F2018%2F10%2F06%2FMarkdown%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Markdown用法 三级标题 序号 序号 序号 序号 代码块1console.log("hello world"); 1select * from reportmgr.tbl_day_alarm 1System.out.println("Hello world");]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6笔记]]></title>
    <url>%2F2018%2F10%2F06%2FES6%2F</url>
    <content type="text"><![CDATA[ES61.兼容性 编译和转换： 在线编译 提前编译 2.ES6语法 变量 函数 数组 字符串 面向对象 Promise generator 模块化 3.通信相关12345数据交互的几种方式:1. 表单2. Ajax，麻烦，安全3. JsonP，简单，有风险4. WebSocket 但是对于浏览器来说，区分不开，是form，还是ajax，还是jsonP 表单提交, 属性action: 提交到哪里method: GET,POST,PUT, 自定义name: 必须加，可以重复submit 提交按钮 数据提交方法 GET 数据放在URL中 容量有限 2. 看得见 3.有缓存 POST 数据放在http-body中 容量很大 2.看不见 3.不缓存 Ajax和表单提交对比： Ajax 用户体验好 表单提交 稳定（ajax是js提交，表单是浏览器提交） Ajax到底怎么回事呢？123456789101112131415161718192021222324252627282930//-----get------ //1. 创建异步对象 var xhr = new XMLHttpRequest(); //2. 连接 xhr.open('get','register.acion?usrname=xx',true); //3. 发送 xhr.send(); //4. 接收 xhr.onreadystatechange = function () &#123; // readyState通信状态 //status，http状态码 if(xhr.readyState==4 &amp;&amp; xhr.status==200)&#123; console.log(xhr.responseText); &#125; &#125;//-------post---------- //创建异步对象 var xhr = new XMLHttpRequest(); //设置请求的类型及url //post请求一定要添加请求头才行不然会报错 xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded"); xhr.open('post', '02.post.php' ); //发送请求 xhr.send('name=fox&amp;age=18'); xhr.onreadystatechange = function () &#123; // 这步为判断服务器是否正确响应 if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123; console.log(xhr.responseText); &#125; &#125;; ajax，缓存ajax 跨域 -CORS跨域formData – Ajax2.0 WebSocket http状态码 1xx 消息 2xx 成功 3xx 重定向 （301 永久重定向 302 临时重定向 304） 4xx 请求错误(客户端) 5xx 服务端错误 6xx 扩展 转发和重定向 转发: 在服务器内部，转交给另外一个服务处理 – 地址不变 重定向：给浏览器下命令，让浏览器请求另外一个地址 –地址可变]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
</search>
