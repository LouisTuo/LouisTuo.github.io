<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[58 到家 MySQL 军规升级版]]></title>
    <url>%2F2019%2F07%2F21%2FMysql%2F</url>
    <content type="text"><![CDATA[一、基础规范 表存储引擎必须使用 InnoDB 表字符集默认使用 utf8，必要时候使用 utf8mb4 解读： （1）通用，无乱码风险，汉字 3 字节，英文 1 字节 （2）utf8mb4 是 utf8 的超集，有存储 4 字节例如表情符号时，使用它 禁止使用存储过程，视图，触发器，Event 解读： （1）对数据库性能影响较大，互联网业务，能让站点层和服务层干的事情，不要交到数据库层 （2）调试，排错，迁移都比较困难，扩展性较差 禁止在数据库中存储大文件，例如照片，可以将大文件存储在对象存储系统，数据库中存储路径 禁止在线上环境做数据库压力测试 测试，开发，线上数据库环境必须隔离 二、命名规范 库名，表名，列名必须用小写，采用下划线分隔 解读：abc，Abc，ABC 都是给自己埋坑 库名，表名，列名必须见名知义，长度不要超过 32 字符 解读：tmp，wushan 谁 TM 知道这些库是干嘛的 库备份必须以 bak 为前缀，以日期为后缀 从库必须以-s 为后缀 备库必须以-ss 为后缀 三、表设计规范 单实例表个数必须控制在 2000 个以内 单表分表个数必须控制在 1024 个以内 表必须有主键，推荐使用 UNSIGNED 整数为主键 潜在坑：删除无主键的表，如果是 row 模式的主从架构，从库会挂住 禁止使用外键，如果要保证完整性，应由应用程式实现 解读：外键使得表之间相互耦合，影响 update/delete 等 SQL 性能，有可能造成死锁，高并发情况下容易成为数据库瓶颈 建议将大字段，访问频度低的字段拆分到单独的表中存储，分离冷热数据 解读：具体参加《如何实施数据库垂直拆分》 四、列设计规范 根据业务区分使用 tinyint/int/bigint，分别会占用 1/4/8 字节 根据业务区分使用 char/varchar 解读： （1）字段长度固定，或者长度近似的业务场景，适合使用 char，能够减少碎片，查询性能高 （2）字段长度相差较大，或者更新较少的业务场景，适合使用 varchar，能够减少空间 根据业务区分使用 datetime/timestamp 解读：前者占用 5 个字节，后者占用 4 个字节，存储年使用 YEAR，存储日期使用 DATE，存储时间使用 datetime 必须把字段定义为 NOT NULL 并设默认值 解读： （1）NULL 的列使用索引，索引统计，值都更加复杂，MySQL 更难优化 （2）NULL 需要更多的存储空间 （3）NULL 只能采用 IS NULL 或者 IS NOT NULL，而在=/!=/in/not in 时有大坑 使用 INT UNSIGNED 存储 IPv4，不要用 char(15) 使用 varchar(20)存储手机号，不要使用整数 解读： （1）牵扯到国家代号，可能出现+/-/()等字符，例如+86 （2）手机号不会用来做数学运算 （3）varchar 可以模糊查询，例如 like ‘138%’ 使用 TINYINT 来代替 ENUM 解读：ENUM 增加新值要进行 DDL 操作 五、索引规范 唯一索引使用 uniq_[字段名]来命名 非唯一索引使用 idx_[字段名]来命名 单张表索引数量建议控制在 5 个以内 解读： （1）互联网高并发业务，太多索引会影响写性能 （2）生成执行计划时，如果索引太多，会降低性能，并可能导致 MySQL 选择不到最优索引 （3）异常复杂的查询需求，可以选择 ES 等更为适合的方式存储 组合索引字段数不建议超过 5 个 解读：如果 5 个字段还不能极大缩小 row 范围，八成是设计有问题 不建议在频繁更新的字段上建立索引 非必要不要进行 JOIN 查询，如果要进行 JOIN 查询，被 JOIN 的字段必须类型相同，并建立索引 解读：踩过因为 JOIN 字段类型不一致，而导致全表扫描的坑么？ 理解组合索引最左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c) 六、SQL 规范 禁止使用 select *，只获取必要字段 解读： （1）select \会增加 cpu/io/内存/带宽的消耗* （2）指定字段能有效利用索引覆盖 （3）指定字段查询，在表结构变更时，能保证对应用程序无影响 insert 必须指定字段，禁止使用 insert into T values() 解读：指定字段插入，在表结构变更时，能保证对应用程序无影响 隐式类型转换会使索引失效，导致全表扫描 禁止在 where 条件列使用函数或者表达式 解读：导致不能命中索引，全表扫描 禁止负向查询以及%开头的模糊查询 解读：导致不能命中索引，全表扫描 禁止大表 JOIN 和子查询 同一个字段上的 OR 必须改写问 IN，IN 的值必须少于 50 个 应用程序必须捕获 SQL 异常 解读：方便定位线上问题]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[NodeJs]]></title>
    <url>%2F2018%2F10%2F08%2FNodejs%2F</url>
    <content type="text"><![CDATA[Node.js Node js模块 http模块 断言 – assert 二进制， File system JS 单线程，单进 Crypto –签名 HTTP/HTTPSHTTP2.0 os Path Events事件]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Js笔记]]></title>
    <url>%2F2018%2F10%2F07%2FJs%2F</url>
    <content type="text"><![CDATA[js笔记 thisthis代表当前对象，但是在事件中代表的是当前对象 排他性 使用id或者index 123456789window.onload = function () &#123; var button = document.getElementsByClassName("button"); for(var i = 0; i&lt;button.length;i++)&#123; //异步 button[i].id = i; button[i].onclick = function () &#123; alert("你点了"+this.id+"按钮"); &#125; &#125; &#125; 使用闭包 12345678910window.onload = function () &#123; var button = document.getElementsByClassName("button"); for(var i = 0; i&lt;button.length;i++)&#123; //异步 (function (i) &#123; button[i].onclick = function () &#123; alert("你点了"+i+"按钮"); &#125; &#125;)(i); &#125; &#125; 数组高级API 1234567891011121314151617181920//1.判断数组类型var arr = [1,2,4];console.log(typeof arr); //objectconsole.log(arr instanceof Array); //truevar arr2 = new Array();console.log(Array.isArray(arr2)); //Array判断是否是数组//2.toString 转化成string，每个用，分割var arr3 = [1,3,"我是","hello"];console.log(arr3.toString()); //3. valueOf() 返回数组对象本身var arr4 = arr.valueOf();console.log(arr4);//4.join() 方法用于把数组中的所有元素放入一个字符串var arr5 = arr3.join("-");console.log(arr5);//5.indexOf()和lastIndexOf() 字符串string]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试插入图片]]></title>
    <url>%2F2018%2F10%2F07%2FTest%2F</url>
    <content type="text"><![CDATA[引入图片]]></content>
  </entry>
  <entry>
    <title><![CDATA[Markdown用法]]></title>
    <url>%2F2018%2F10%2F06%2FMarkdown%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Markdown用法 三级标题 序号 序号 序号 序号 代码块1console.log("hello world"); 1select * from reportmgr.tbl_day_alarm 1System.out.println("Hello world");]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6笔记]]></title>
    <url>%2F2018%2F10%2F06%2FES6%2F</url>
    <content type="text"><![CDATA[ES61.兼容性 编译和转换： 在线编译 提前编译 2.ES6语法 变量 函数 数组 字符串 面向对象 Promise generator 模块化 3.通信相关12345数据交互的几种方式:1. 表单2. Ajax，麻烦，安全3. JsonP，简单，有风险4. WebSocket 但是对于浏览器来说，区分不开，是form，还是ajax，还是jsonP 表单提交, 属性action: 提交到哪里method: GET,POST,PUT, 自定义name: 必须加，可以重复submit 提交按钮 数据提交方法 GET 数据放在URL中 容量有限 2. 看得见 3.有缓存 POST 数据放在http-body中 容量很大 2.看不见 3.不缓存 Ajax和表单提交对比： Ajax 用户体验好 表单提交 稳定（ajax是js提交，表单是浏览器提交） Ajax到底怎么回事呢？123456789101112131415161718192021222324252627282930//-----get------ //1. 创建异步对象 var xhr = new XMLHttpRequest(); //2. 连接 xhr.open('get','register.acion?usrname=xx',true); //3. 发送 xhr.send(); //4. 接收 xhr.onreadystatechange = function () &#123; // readyState通信状态 //status，http状态码 if(xhr.readyState==4 &amp;&amp; xhr.status==200)&#123; console.log(xhr.responseText); &#125; &#125;//-------post---------- //创建异步对象 var xhr = new XMLHttpRequest(); //设置请求的类型及url //post请求一定要添加请求头才行不然会报错 xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded"); xhr.open('post', '02.post.php' ); //发送请求 xhr.send('name=fox&amp;age=18'); xhr.onreadystatechange = function () &#123; // 这步为判断服务器是否正确响应 if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123; console.log(xhr.responseText); &#125; &#125;; ajax，缓存ajax 跨域 -CORS跨域formData – Ajax2.0 WebSocket http状态码 1xx 消息 2xx 成功 3xx 重定向 （301 永久重定向 302 临时重定向 304） 4xx 请求错误(客户端) 5xx 服务端错误 6xx 扩展 转发和重定向 转发: 在服务器内部，转交给另外一个服务处理 – 地址不变 重定向：给浏览器下命令，让浏览器请求另外一个地址 –地址可变 进程和线程进程拥有独立的执行空间、存储同一个进程内的所有线程共享一套空间、代码 多进程 成本高（慢），安全（进程隔离），进程间通信麻烦，写代码简单 多线程 成本低（块），不安全（要死都死了），线程间通信容易，写代码复杂 多进程 慢，简单，安全 PHP，Node多线程 快，复杂，脆弱 Java，C]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
</search>
